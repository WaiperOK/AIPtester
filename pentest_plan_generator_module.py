import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, filedialog
import threading
import json
import traceback
from tkinter import font


def create_tab(tab_frame, api_service, selected_model_var, status_setter, theme_colors, dynamic_font_widgets_list):
    scrolledtext_bg = theme_colors.get("scrolledtext_bg", "#1e1e1e")
    scrolledtext_fg = theme_colors.get("scrolledtext_fg", "white")
    text_font_to_use = theme_colors.get("text_font")

    frame = ttk.Frame(tab_frame)
    frame.pack(fill="both", expand=True)
    title_font = font.Font(family=text_font_to_use.cget("family"), size=text_font_to_use.cget("size") + 4, weight="bold")
    ttk.Label(frame, text="Генератор Плана Пентеста (AI)", font=title_font).pack(pady=(0, 10), anchor="center")

    input_outer_frame = ttk.Frame(frame)
    input_outer_frame.pack(fill="both", expand=False, pady=5)
    input_paned_window = ttk.PanedWindow(input_outer_frame, orient=tk.HORIZONTAL)
    input_paned_window.pack(fill="both", expand=True)

    desc_frame = ttk.Labelframe(input_paned_window, text="Описание задачи (цели, скоуп, инфо, ограничения)", padding=5)
    plan_description_text = scrolledtext.ScrolledText(desc_frame, height=10, width=60, wrap=tk.WORD, bg=scrolledtext_bg,
                                                      fg=scrolledtext_fg, relief="solid", bd=1, font=text_font_to_use)
    plan_description_text.pack(fill="both", expand=True)
    plan_description_text.insert(tk.END,
                                 """Пример:
Цель: Оценить безопасность веб-приложения example.com.
Скоуп: example.com и его поддомены app.example.com, api.example.com.
Тип: Black Box веб-приложения.""")
    dynamic_font_widgets_list.append(plan_description_text)
    input_paned_window.add(desc_frame, weight=2)

    options_frame_outer = ttk.Frame(input_paned_window)
    options_frame = ttk.Frame(options_frame_outer, padding=5)
    options_frame.pack(fill="both", expand=True)
    input_paned_window.add(options_frame_outer, weight=1)

    row_idx = 0
    ttk.Label(options_frame, text="Тип пентеста:").grid(row=row_idx, column=0, sticky="w", padx=5, pady=3)
    pentest_type_combo = ttk.Combobox(options_frame, font=text_font_to_use,
                                      values=["Комплексный", "Веб-приложение (Black Box)", "Веб-приложение (Gray Box)",
                                              "Внутренняя сеть", "Внешний периметр", "Мобильное приложение (Android)",
                                              "Мобильное приложение (iOS)", "Социальная инженерия"], state="readonly",
                                      width=30)
    pentest_type_combo.grid(row=row_idx, column=1, padx=5, pady=3, sticky="ew")
    pentest_type_combo.current(0)
    row_idx += 1

    ttk.Label(options_frame, text="Методология:").grid(row=row_idx, column=0, sticky="w", padx=5, pady=3)
    methodology_combo = ttk.Combobox(options_frame, font=text_font_to_use,
                                     values=["PTES", "OWASP", "NIST SP 800-115", "OSSTMM",
                                             "Комбинированная/Адаптивная"], state="readonly", width=30)
    methodology_combo.grid(row=row_idx, column=1, padx=5, pady=3, sticky="ew")
    methodology_combo.current(0)
    row_idx += 1
    options_frame.columnconfigure(1, weight=1)

    plan_generate_button = ttk.Button(frame, text="Сгенерировать План Пентеста")
    plan_generate_button.pack(pady=10)

    results_control_frame = ttk.Frame(frame)
    results_control_frame.pack(fill="x", pady=(0, 2))

    def save_plan_txt():
        content = plan_result_text.get("1.0", tk.END).strip()
        if not content:
            messagebox.showwarning("Нечего сохранять", "Сначала сгенерируйте план.", parent=tab_frame)
            return
        filepath = filedialog.asksaveasfilename(defaultextension=".txt",
                                                filetypes=[("Text files", "*.txt"), ("All files", "*.*")],
                                                title="Сохранить план пентеста как TXT", parent=tab_frame)
        if filepath:
            try:
                with open(filepath, "w", encoding="utf-8") as f:
                    f.write(content)
                status_setter(f"План сохранен в {filepath}")
            except Exception as e:
                messagebox.showerror("Ошибка сохранения", f"Не удалось сохранить файл:\n{e}", parent=tab_frame)

    def save_plan_json():
        content = plan_result_text.get("1.0", tk.END).strip()
        if not content:
            messagebox.showwarning("Нечего сохранять", "Сначала сгенерируйте план.", parent=tab_frame)
            return
        filepath = filedialog.asksaveasfilename(defaultextension=".json",
                                                filetypes=[("JSON files", "*.json"), ("All files", "*.*")],
                                                title="Сохранить план пентеста как JSON", parent=tab_frame)
        if filepath:
            try:
                json_data = {"pentest_plan_text": content}
                with open(filepath, "w", encoding="utf-8") as f:
                    json.dump(json_data, f, indent=4, ensure_ascii=False)
                status_setter(f"План сохранен в {filepath} (JSON)")
            except Exception as e:
                messagebox.showerror("Ошибка сохранения", f"Не удалось сохранить файл:\n{e}", parent=tab_frame)

    save_txt_button = ttk.Button(results_control_frame, text="Сохранить .txt", command=save_plan_txt)
    save_txt_button.pack(side=tk.LEFT, padx=5)
    save_json_button = ttk.Button(results_control_frame, text="Сохранить .json", command=save_plan_json)
    save_json_button.pack(side=tk.LEFT, padx=5)

    def copy_plan_results():
        content = plan_result_text.get("1.0", tk.END).strip()
        if content:
            try:
                tab_frame.clipboard_clear()
                tab_frame.clipboard_append(content)
                status_setter("План пентеста скопирован.")
            except tk.TclError as e_clip:
                status_setter(f"Ошибка буфера: {e_clip}")
                messagebox.showwarning("Буфер обмена", f"Не удалось: {e_clip}", parent=tab_frame)
        else:
            status_setter("Нет текста для копирования.")

    copy_button = ttk.Button(results_control_frame, text="Копировать План", command=copy_plan_results)
    copy_button.pack(side=tk.RIGHT, padx=0)

    plan_result_text = scrolledtext.ScrolledText(frame, height=20, bg=scrolledtext_bg, fg=scrolledtext_fg, wrap=tk.WORD,
                                                 relief="solid", bd=1, font=text_font_to_use)
    dynamic_font_widgets_list.append(plan_result_text)
    plan_result_text.pack(fill="both", expand=True)
    plan_result_text.insert(tk.END, "Ожидание генерации плана...\n")

    def _pentest_plan_thread_worker(description, p_type, methodology):
        status_setter("Генерация плана пентеста через AI...")
        plan_result_text.delete(1.0, tk.END)
        params = {"objectives": "На основе описания.", "scope": description, "pentest_type": p_type,
                  "methodology": methodology, "target_info": "См. описание.", "constraints": "См. описание."}
        try:
            if not api_service or not hasattr(api_service, 'generate_pentest_plan'):
                plan_result_text.insert(tk.END, "AI сервис не инициализирован или метод 'generate_pentest_plan' не найден.\n")
                status_setter("Ошибка AI сервиса")
                return
            result = api_service.generate_pentest_plan(params)
            if isinstance(result, dict) and "error" in result:
                plan_result_text.insert(tk.END, f"Ошибка API: {result['error']}\n")
                if result.get("status_code"):
                    plan_result_text.insert(tk.END, f"Status Code: {result['status_code']}\n")
            elif isinstance(result, dict) and result.get("status") == "success" and ("text_response" in result or "pentest_plan" in result):
                plan_content = result.get("text_response") or result.get("pentest_plan", "")
                plan_result_text.insert(tk.END, plan_content)
                if result.get("log"):
                    plan_result_text.insert(tk.END, f"\n\n--- Лог AI ---\n{result['log']}")
            else:
                plan_result_text.insert(tk.END, f"Неожиданный ответ:\n{json.dumps(result, indent=2, ensure_ascii=False)}\n")
            status_setter("Генерация плана пентеста завершена.")
        except Exception as e:
            detailed_error = traceback.format_exc()
            plan_result_text.insert(tk.END, f"Ошибка: {str(e)}\n\n{detailed_error}\n")
            status_setter(f"Ошибка плана: {str(e)}")

    def run_generate_plan_command():
        description = plan_description_text.get("1.0", tk.END).strip()
        p_type = pentest_type_combo.get()
        methodology = methodology_combo.get()
        if not description:
            messagebox.showwarning("Внимание", "Предоставьте описание задачи.", parent=tab_frame)
            return
        plan_generate_button.config(state=tk.DISABLED)

        def thread_target_wrapper():
            try:
                _pentest_plan_thread_worker(description, p_type, methodology)
            finally:
                if tab_frame.winfo_exists():
                    tab_frame.after(0, lambda: plan_generate_button.config(state=tk.NORMAL))

        threading.Thread(target=thread_target_wrapper, daemon=True).start()

    plan_generate_button.config(command=run_generate_plan_command)